// <auto-generated />
using System;
using FeedAggregator.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FeedAggregator.DAL.Data.Migrations
{
    [DbContext(typeof(FeedAggregatorDbContext))]
    [Migration("20180920154844_AddSeedEntities")]
    partial class AddSeedEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FeedAggregator.DAL.Entities.FeedCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChanellUrl");

                    b.Property<int>("UserCollectionId");

                    b.HasKey("Id");

                    b.HasIndex("UserCollectionId");

                    b.ToTable("FeedCollections");

                    b.HasData(
                        new { Id = 1, ChanellUrl = "http://rss.cnn.com/rss/cnn_topstories.rss", UserCollectionId = 1 },
                        new { Id = 2, ChanellUrl = "http://newsrss.bbc.co.uk/rss/newsonline_world_edition/americas/rss.xml", UserCollectionId = 1 }
                    );
                });

            modelBuilder.Entity("FeedAggregator.DAL.Entities.FeedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("FeedCollectionId");

                    b.Property<string>("Link");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("FeedCollectionId");

                    b.ToTable("FeedItems");

                    b.HasData(
                        new { Id = 1, Content = "Some text that is content", FeedCollectionId = 1, Link = "Link1", PublishDate = new DateTime(2018, 9, 20, 18, 48, 43, 707, DateTimeKind.Local), Title = "FirstNews" },
                        new { Id = 2, Content = "Some text that is content", FeedCollectionId = 1, Link = "Link2", PublishDate = new DateTime(2018, 9, 20, 18, 48, 43, 720, DateTimeKind.Local), Title = "SecondNews" },
                        new { Id = 3, Content = "Some text that is content", FeedCollectionId = 2, Link = "Link3", PublishDate = new DateTime(2018, 9, 20, 18, 48, 43, 720, DateTimeKind.Local), Title = "ThirdNews" },
                        new { Id = 4, Content = "Some text that is content", FeedCollectionId = 2, Link = "Link4", PublishDate = new DateTime(2018, 9, 20, 18, 48, 43, 720, DateTimeKind.Local), Title = "FourthNews" }
                    );
                });

            modelBuilder.Entity("FeedAggregator.DAL.Entities.UserCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserCollections");

                    b.HasData(
                        new { Id = 1, UserId = "12345678" }
                    );
                });

            modelBuilder.Entity("FeedAggregator.DAL.Entities.FeedCollection", b =>
                {
                    b.HasOne("FeedAggregator.DAL.Entities.UserCollection", "UserCollection")
                        .WithMany("FeedCollections")
                        .HasForeignKey("UserCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FeedAggregator.DAL.Entities.FeedItem", b =>
                {
                    b.HasOne("FeedAggregator.DAL.Entities.FeedCollection", "FeedCollection")
                        .WithMany("FeedItems")
                        .HasForeignKey("FeedCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
